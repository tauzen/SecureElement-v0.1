/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"

interface nsIDOMDOMRequest;
interface nsIDOMMozIccInfo;
interface nsIDOMWindow;

[scriptable, uuid(7c0ada3d-d8d4-493e-9243-fa3df39855e4)]
interface nsIIccListener : nsISupports
{
  void notifyStkCommand(in DOMString aMessage);
  void notifyStkSessionEnd();
  void notifyCardStateChanged();
  void notifyIccInfoChanged();
};

[scriptable, uuid(1a649dd0-6a57-491d-b425-ceecea56e376)]
interface nsIIccChannelCallback : nsISupports
{
  /**
   * Callback function to notify on successfully opening a logical channel.
   *
   * @param channel
   *        The Channel Number/Handle that is successfully opened.
   */
  void notifyOpenChannelSuccess(in long channel);

  /**
   * Callback function to notify on successfully closing the logical channel.
   *
   */
  void notifyCloseChannelSuccess();

  /**
   * Callback function to notify the status of 'iccExchangeAPDU' command.
   *
   * @param sw1
   *        Response's First Status Byte
   * @param sw2
   *        Response's Second Status Byte
   * @param length
   *        Length of response's data field
   * @param data
   *        Response's data field bytes
   */
  void notifyExchangeAPDUResponse(in octet sw1,
                                  in octet sw2,
                                  in unsigned long length,
                                  [array, size_is(length)] in octet data);

  /**
   * Callback function to notify error
   *
   */
  void notifyError(in DOMString error);
};

/**
 * XPCOM component (in the content process) that provides the ICC information.
 */
[scriptable, uuid(7a93578d-b389-4bec-9ea3-5ee4cf048710)]
interface nsIIccProvider : nsISupports
{
  /**
   * Called when a content process registers receiving unsolicited messages from
   * RadioInterfaceLayer in the chrome process. Only a content process that has
   * the 'mobileconnection' permission is allowed to register.
   */
  void registerIccMsg(in unsigned long clientId, in nsIIccListener listener);
  void unregisterIccMsg(in unsigned long clientId, in nsIIccListener listener);

  /**
   * UICC Information
   */
  nsIDOMMozIccInfo getIccInfo(in unsigned long clientId);

  /**
   * Card State
   */
  DOMString getCardState(in unsigned long clientId);

  /**
   * STK interfaces.
   */
  void sendStkResponse(in unsigned long clientId,
                       in nsIDOMWindow window,
                       in jsval command,
                       in jsval response);
  void sendStkMenuSelection(in unsigned long clientId,
                            in nsIDOMWindow window,
                            in unsigned short itemIdentifier,
                            in boolean helpRequested);
  void sendStkTimerExpiration(in unsigned long clientId,
                              in nsIDOMWindow window,
                              in jsval timer);
  void sendStkEventDownload(in unsigned long clientId,
                            in nsIDOMWindow window,
                            in jsval event);

  /**
   * Card lock interfaces.
   */
  nsIDOMDOMRequest getCardLockState(in unsigned long clientId,
                                    in nsIDOMWindow window,
                                    in DOMString lockType);
  nsIDOMDOMRequest unlockCardLock(in unsigned long clientId,
                                  in nsIDOMWindow window,
                                  in jsval info);
  nsIDOMDOMRequest setCardLock(in unsigned long clientId,
                               in nsIDOMWindow window,
                               in jsval info);
  nsIDOMDOMRequest getCardLockRetryCount(in unsigned long clientId,
                                         in nsIDOMWindow window,
                                         in DOMString lockType);

  /**
   * Phonebook interfaces.
   */
  nsIDOMDOMRequest readContacts(in unsigned long clientId,
                                in nsIDOMWindow window,
                                in DOMString contactType);

  nsIDOMDOMRequest updateContact(in unsigned long clientId,
                                 in nsIDOMWindow window,
                                 in DOMString contactType,
                                 in jsval contact,
                                 in DOMString pin2);

  /**
   * Secure Card Icc communication channel
   */
  void iccOpenChannel(in unsigned long clientId,
                      in DOMString aid,
                      in nsIIccChannelCallback callback);

  void iccExchangeAPDU(in unsigned long clientId,
                       in long channel,
                       in octet cla,
                       in octet ins,
                       in octet p1,
                       in octet p2,
                       in unsigned long lc,
                       [array, size_is(lc)] in octet data,
                       in nsIIccChannelCallback callback);

  void iccCloseChannel(in unsigned long clientId,
                       in long channel,
                       in nsIIccChannelCallback callback);

  /**
   * Helpers
   */
  nsIDOMDOMRequest matchMvno(in unsigned long clientId,
                             in nsIDOMWindow window,
                             in DOMString mvnoType,
                             in DOMString mvnoData);
};
